//This is my sketch which I've named ParaShape. I wanted to create a sketch which reacted to live sound in an imaginative way.

//Firstly, if running on Processing 3, it is necessary to open the project through 'Terminal', the MacBook 's Command Line Interface.

/* Mic / Audio Input Test
 Open the Processing 3 app through Terminal by typing:
 /Applications/Processing.app/Contents/MacOS/Processing;
 
 Then open a sketch that requires use of the mic/camera in the Processing PDE.
 */

import processing.sound.*; //Importing the Processing Sound Library into the project in order to measure amplitude.

ArrayList all_c = new ArrayList();
//This array list holds all of the data for the 'circles' which are created when the amplitude is above a certain threshold.
//An array list is used as opposed to an array as you are not required to define its size making it much more dynamic.
//The list is capable of containing as many items as needed, in this case to hold information for the 'circle' objects.
//The objects can also be removed from the list at any time.

boolean trigger;//This variable will be used later on to trigger the creation of circles above a certain amplitude.

//Declaring 'AudioIn' and 'Amplitude' as global variables so that they can be used in the setup and draw methods.
AudioIn in;
Amplitude amp;

//Assigning objects to global variables to be used later on.
shape s;
shape s2;
shape s3;

ring r;
ring r2;
ring r3;
ring r4;



void setup() {

  //Deciding on the size of the project screen in the setup method.
  size(1300, 800);

  //This creates new 'Amplitude' and 'AudioIn' objects which can now be used in the sketch.
  amp = new Amplitude(this);
  in = new AudioIn(this, 0);

  in.start();//Begins grabbing audio input from the computer's soundcard.
  amp.input(in);//Assigns amplitude input to input from computer soundcard.

  //I then create three new 'shapes' for which the code is in the 'Shape' tab.
  //The argument for this object is shape(value of float t).
  //Variable t is input into equations (see 'Shape' tab) of which the output is used to produce x and y coordinates for each 'shape'.
  //As I want the shapes to be in different places along the route that they follow (generated by the parametric function), I start them off with different values of t.
  s = new shape(0);
  s2 = new shape(20);
  s3 = new shape(40);

  //I then create four rings. The argument for the rings is ring(x position, y position). I've placed each of the rings in four different corners of the project window.
  r = new ring(width/8, height/8);
  r2 = new ring(width/1.14285714, height/8);
  r3 = new ring(width/8, height/1.14285714);
  r4 = new ring(width/1.14285714, height/1.14285714);
}

void draw() {

  //The background is declared in the draw method as I want the screen to refresh every frame.
  background(0);

  //In this part of the code, I call the function 'display' which displays the three shapes and four rings I created in the setup method.
  //I created these functions within the respective classes for the objects.
  //The arguments for 'shape' is shape(R value, G value, B value)
  //I have included a test which changes the display colour of the 'shape' objects depending on what key is pressed.

  //These objects change colour depending on the amplitude of the input signal from the microphone, changing the shapes from black to white (White Mode).
  //White Mode is initiated by pressing the LEFT arrow key.
  //It is the only mode that displays the four ring objects.
  if (keyCode == LEFT) { //White Mode
    s.display(amp.analyze() * random(800, 1000), amp.analyze() * random(800, 1000), amp.analyze() * random(800, 1000)); //colour changes according to amplitude of sound
    s2.display(amp.analyze() * random(800, 1000), amp.analyze() * random(800, 1000), amp.analyze() * random(800, 1000));
    s3.display(amp.analyze() * random(800, 1000), amp.analyze() * random(800, 1000), amp.analyze() * random(800, 1000));


    r.display();
    r2.display();
    r3.display();
    r4.display();
  } else if (keyCode == RIGHT) {//Blue Mode
    //Blue Mode is initiated by pressing the RIGHT arrow key.
    // In Blue Mode, objects change from blue to red depending on the microphone input level.
    //This is done by mapping the amplitude value of the signal (with a maximum of 0.5) to red colour values between 20 and 200.
    //As the input signal is unlikely to go much higher than 0.5, setting this range allows us to get the full range of red values.
    //The shapes in Blue Mode use a different route (i.e. uses different equations to produce coordinates) to the shapes in the other modes.
    s.display((map(amp.analyze(), 0, 0.5, 20, 200)), 43, 109);
    s2.display((map(amp.analyze(), 0, 0.5, 20, 200)), 43, 109);
    s3.display((map(amp.analyze(), 0, 0.5, 20, 200)), 43, 109);
  } else {

    //Red Mode
    //Red mode has a set colour which does not change.
    s.display(188, 106, 106);
    s2.display(188, 106, 106);
    s3.display(188, 106, 106);
  }

  //This is the movement function for the 'shape' objects.
  s.move();
  s2.move();
  s3.move();



  //Creating a condition for Boolean 'trigger'. It will become true when the amplitude is over 0.2.
  if (amp.analyze() > 0.2) {

    trigger = true;
  }

  //Using a For Loop to retrieve circle objects from array list 'all_c'.
  //Also retrieving objects for c2 so as to create a second location from which circles are emitted.
  for (int i = 0; i < all_c.size(); i++) {
    circle c = (circle) all_c.get(i);
    circle c2 = (circle) all_c.get(i);

    //Removing objects from array list if they are classed as 'dead'. Meaning that their 'life' timer has run out.
    if (c.dead == true) {

      all_c.remove(i);//removing dead circles from array list.
    } else {

      c.display();
      c.move();
    }


    if (c2.dead == true) {//Calling the same functions for the second location

      all_c.remove(i);
    } else {

      c2.display();
      c2.move();
    }
  }

  //When the boolean is true (amp is greater than 0.02), new circles are created and added to the array list to be retrieved in the for loop above.
  if (trigger == true) {
    circle c = new circle(width/1.333, height/1.333);
    all_c.add(c);

    circle c2 = new circle(width/4, height/4);
    all_c.add(c2);
  }



  trigger = false;//Resetting the trigger
}
